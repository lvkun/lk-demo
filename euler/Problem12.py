#-------------------------------------------------------------------------------
# Name:        Problem 12
# Purpose:
#              The sequence of triangle numbers is generated by adding the
#              natural numbers. So the 7th triangle number would be
#              1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
#              1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#              Let us list the factors of the first seven triangle numbers:
#               1: 1
#               3: 1,3
#               6: 1,2,3,6
#              10: 1,2,5,10
#              15: 1,3,5,15
#              21: 1,3,7,21
#              28: 1,2,4,7,14,28
#              We can see that 28 is the first triangle number to have over
#              five divisors.
#              What is the value of the first triangle number to have over
#              five hundred divisors?
# Link:        http://projecteuler.net/index.php?section=problems&id=12
# Author:      brlv
#-------------------------------------------------------------------------------
#!/usr/bin/env python
def isPrime(num, primes):
    for i in primes:
        if i > num**0.5:
            primes.append(num)
            return True
        if num%i == 0:
            return False

def buildPrimeList(end):
    primes = [2]
    for num in range(3, end, 2):
        isPrime(num, primes)

    #print primes
    return primes

def divide(num, i):
    ret = 0
    uNum = num
    while(uNum%i == 0):
        uNum = uNum/i;
        ret += 1
    return ret

def getDivisorsNum(num, primes):
    if num == 1:
        return 1

    list = []
    for prime in primes:
        
        if prime > num:
            break
        
        t = divide(num, prime)
        if t != 0:
            list.append(t)

    ret = 1
    for t in list:
        ret *= (t+1)
    
    #print num, ret
    return ret

def main():
    primes = buildPrimeList(100000)
    # for i in range(1, 20000):
    #     n = getDivisorsNum((1+i)*i/2, primes)
    #     if n >= 500:
    #         print i,n
    print getDivisorsNum((12375+1)*12375/2, primes)
    print (12375+1)*12375/2
    # for i in range(1,10):
    #     print (1+i)*i/2
    return
    # assert(getDivisorsNum(1, primes) == 1)
    # assert(getDivisorsNum(3, primes) == 2)
    # assert(getDivisorsNum(6, primes) == 4)
    # assert(getDivisorsNum(10, primes) == 4)
    # assert(getDivisorsNum(15, primes) == 4)
    # assert(getDivisorsNum(21, primes) == 4)
    # assert(getDivisorsNum(28, primes) == 6)
    #print sum(range(1,101))
    pass

if __name__ == '__main__':
    main()  
